class Matrix:
    def __init__(self, rows, cols):
        self.rows = rows
        self.cols = cols
        self.data = [[0] * cols for _ in range(rows)]

    @classmethod
    def from_list(cls, matrix_list):
        rows = len(matrix_list)
        cols = len(matrix_list[0])
        matrix = cls(rows, cols)
        matrix.data = matrix_list
        return matrix

    def __str__(self):
        return '\n'.join([' '.join(map(str, row)) for row in self.data])

    def __add__(self, other):
        if self.rows != other.rows or self.cols != other.cols:
            raise ValueError("Matrices must have the same dimensions for addition.")
        result = Matrix(self.rows, self.cols)
        for i in range(self.rows):
            for j in range(self.cols):
                result.data[i][j] = self.data[i][j] + other.data[i][j]
        return result

    def __sub__(self, other):
        if self.rows != other.rows or self.cols != other.cols:
            raise ValueError("Matrices must have the same dimensions for subtraction.")
        result = Matrix(self.rows, self.cols)
        for i in range(self.rows):
            for j in range(self.cols):
                result.data[i][j] = self.data[i][j] - other.data[i][j]
        return result

    def __mul__(self, other):
        if isinstance(other, int) or isinstance(other, float):
            result = Matrix(self.rows, self.cols)
            for i in range(self.rows):
                for j in range(self.cols):
                    result.data[i][j] = self.data[i][j] * other
            return result
        elif isinstance(other, Matrix):
            if self.cols != other.rows:
                raise ValueError("Number of columns in the first matrix must be equal to the number of rows in the second matrix.")
            result = Matrix(self.rows, other.cols)
            for i in range(self.rows):
                for j in range(other.cols):
                    for k in range(self.cols):
                        result.data[i][j] += self.data[i][k] * other.data[k][j]
            return result
        else:
            raise ValueError("Multiplication is only defined between two matrices or a matrix and a scalar.")

    def transpose(self):
        result = Matrix(self.cols, self.rows)
        for i in range(self.rows):
            for j in range(self.cols):
                result.data[j][i] = self.data[i][j]
        return result


def create_matrix_from_input():
    rows = int(input("Enter the number of rows: "))
    cols = int(input("Enter the number of columns: "))
    print("Enter the elements row-wise (space-separated):")
    matrix_list = []
    for _ in range(rows):
        row = list(map(int, input().split()))
        if len(row) != cols:
            raise ValueError("Number of elements in each row must match the specified number of columns.")
        matrix_list.append(row)
    return Matrix.from_list(matrix_list)


def print_menu():
    print("\nChoose an operation:")
    print("1. Addition")
    print("2. Subtraction")
    print("3. Multiplication")
    print("4. Transpose")
    print("5. Exit")


def main():
    while True:
        print_menu()
        choice = input("Enter your choice (1-5): ")
        if choice == '5':
            print("Exiting...")
            break
        elif choice in {'1', '2', '3'}:
            matrix1 = create_matrix_from_input()
            matrix2 = create_matrix_from_input()
            if choice == '1':
                try:
                    print("Result:")
                    print(matrix1 + matrix2)
                except ValueError as e:
                    print("Error:", e)
            elif choice == '2':
                try:
                    print("Result:")
                    print(matrix1 - matrix2)
                except ValueError as e:
                    print("Error:", e)
            else:
                try:
                    print("Result:")
                    print(matrix1 * matrix2)
                except ValueError as e:
                    print("Error:", e)
        elif choice == '4':
            matrix = create_matrix_from_input()
            print("Result:")
            print(matrix.transpose())
        else:
            print("Invalid choice. Please choose a number between 1 and 5.")


if __name__ == "__main__":
    main()
